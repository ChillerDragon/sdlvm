#!/bin/bash

if [ ! -d ~/.sdlvm ]
then
	echo "Error: ~/.sdlvm not found"
	exit 1
fi

mkdir -p ~/.sdlvm/versions
mkdir -p ~/.sdlvm/src
touch ~/.sdlvm/version
CURRENT_VERSION="$(cat ~/.sdlvm/version)"

function show_help() {
	echo "usage: sdlvm [OPTIONS..]"
	echo "options:"
	echo " help 			shows this help"
	echo " install <commit/tag>	installs SDL version by git commit or tag"
	echo " use <installed version>	set installed SDL version as default for compiler and runtime"
	echo " version			show current active version"
	echo " versions			list installed versions"
}

if [ "$#" -eq "0" ]
then
	show_help
	exit 1
fi

function is_cmd() {
	[ -x "$(command -v "$1")" ] && return 0
}

function get_cores() {
	local cores
	cores=0
	if is_cmd nproc
	then
		cores="$(nproc)"
	elif is_cmd sysctl
	then
		cores="$$(sysctl -n hw.ncpu)"
	fi
	if [ "$cores" -lt "1" ]
	then
		cores=1
	fi
	echo "$cores"
}

function get_src() {
	if [ -d ~/.sdlvm/src/SDL/.git ]
	then
		(
			cd ~/.sdlvm/src/SDL || exit 1
			git fetch
		)
	else
		(
			cd ~/.sdlvm/src || exit 1
			git clone git@github.com:libsdl-org/SDL.git
		)
	fi
}

function install_latest() {
	(
		cd ~/.sdlvm/src/SDL || exit 1
		git add .
		git reset --hard
		rm -rf build
		git checkout main
		git pull
		./configure || exit 1
		make -j"$(get_cores)" || exit 1
		cd build/.libs || exit 1
		rm ./*.d
		rm ./*.o
		mkdir -p ~/.sdlvm/versions/latest
		mv ./* ~/.sdlvm/versions/latest
	)
}

function install_sdl1() {
	local version=SDL1
	(
		cd ~/.sdlvm/src || exit 1
		git clone git@github.com:libsdl-org/sdl12-compat
		cd ~/.sdlvm/src/sdl12-compat || exit 1
		git add .
		git reset --hard
		git pull
		rm -rf build
		mkdir build
		cd build || exit 1
		cmake ..
		make -j"$(get_cores)" || exit 1
		mkdir -p ~/.sdlvm/versions/"$version"
		mv ./libSDL-* ~/.sdlvm/versions/"$version"
	)
}

function install_version() {
	local version="$1"
	(
		cd ~/.sdlvm/src/SDL || exit 1
		git add .
		git reset --hard
		rm -rf build
		# TODO: error checking for invalid tags/commits
		git checkout "$version"
		./configure || exit 1
		make -j"$(get_cores)" || exit 1
		cd build/.libs || exit 1
		rm ./*.d
		rm ./*.o
		mkdir -p ~/.sdlvm/versions/"$version"
		mv ./* ~/.sdlvm/versions/"$version"
	)
}

function get_versions() {
	(
		cd ~/.sdlvm/src/SDL || exit 1
		git --no-pager tag
	)
}

function parse_args() {
	local arg
	local version
	local install_version
	local versions
	version="$(get_versions)"
	while true
	do
		arg="$1"
		shift
		[[ "$arg" == "" ]] || [[ "$arg" == "--" ]] && break

		if [ "$arg" == "-h" ] || [ "$arg" == "--help" ] || [ "$arg" == "help" ]
		then
			show_help
			exit 0
		elif [ "$arg" == "version" ]
		then
			echo "version: $CURRENT_VERSION"
		elif [ "$arg" == "versions" ]
		then
			echo "installed versions:"
			for version in ~/.sdlvm/versions/*/
			do
				[[ -d "$version" ]] || continue

				echo "  $(basename "$version")"
			done
		elif [ "$arg" == "use" ]
		then
			version="$1"
			shift
			if [ "$version" == "" ]
			then
				echo "usage: sdlvm use <version>"
				exit 1
			fi
			if [ ! -d ~/.sdlvm/versions/"$version" ]
			then
				echo "Error: version $version is not installed"
				echo "  sdlvm install $version"
				exit 1
			fi
			echo "$version" > ~/.sdlvm/version
		elif [ "$arg" == "install" ]
		then
			install_version="$1"
			shift
			get_src
			if [ "$install_version" == "" ]
			then
				echo "usage: sdlvm install <version>"
				echo "versions:"
				echo "  latest"
				echo "  SDL1"
				if [ -d ~/.sdlvm/src/SDL/.git ]
				then
					for version in "$versions"
					do
						echo "  $version"
					done
				fi
				exit 1
			fi
			for version in ~/.sdlvm/versions/*/
			do
				[[ -d "$version" ]] || continue

				version="$(basename "$version")"
				if [ "$version" == "$install_version" ] && [ "$install_version" != "latest" ]
				then
					echo "version $install_version is already installed"
					exit 1
				fi
			done
			if [ "$install_version" == "latest" ]
			then
				install_latest
			elif [ "$install_version" == "SDL1" ]
			then
				install_sdl1
			else
				local found=0
				if [[ "$install_version" =~ ^[0-9a-f]+$ ]]
				then
					found=1
				fi
				if [ "$found" == "0" ]
				then
					for version in "$versions"
					do
						if [ "$version" == "$install_version" ]
						then
							found=1
							break
						fi
					done
				fi
				if [ "$found" == "0" ]
				then
					echo "Error: invalid version or commit"
					exit 1
				fi
				install_version "$install_version"
			fi
			echo "$install_version" > ~/.sdlvm/version
		else
			show_help
			exit 1
		fi
	done
}

parse_args "$@"

